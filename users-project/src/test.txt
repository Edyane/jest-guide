Queries

A super important part of testing is finding the elements 
that our component has created. 

Need to test form submission? --> You need to click a button
to click!

Need to test navigation? --> You need to find a link to 
click!

Need to make sure a header is visible? -- You need to find a
header! 

Bad news - the system we use to find elements is a little 
tedious.

React Testing Library Query System 
Collection of -48 functions that are used to find elements 

Partial list 
screen.getByRole()
screen.queryByRole()
screen.findAllByTitle()
screen.findAllByDisplayValue()
screen.findByRole()
screen.findByTitle()
screen.queryAllByRole()
screen.queryByLabelText()
screen.getByLabelText()

You do not need memorize these

ARIA Roles 
- ARIA Roles clarify the purpose of an HTML element 
- Traditionally used by screen readers - softwares to help people understand the the content of screen;
- Many HTML elements have an 'implicit', or automatically assigned role;
- Elements can be assigned manually assigned a role. Even trained engineers do this incorrectly;

Matchers from Jest 
expect(['a', 'b']).toHaveLength(2) - makes sure the value is an an array with a particular lenght;
expect(5).toEqual(5) - makes sure the value equals another value;
expect(['a', 'b', 'c']).toContain('b') - makes sure an array contains a value, or make sure a string contains another string;
expect(fn).toThrow() - makes sure a function throws an erro when called;
expec(mock).toHaveBeenCalled() - makes sure a mock function has been called;

Matchers from React Testing Library 
expect(element).toBeInTheDocument() - makes sure elements is present on the page;
expect(element).toBeEnabled() - make sure an element (like an input) is not disabled;
expect(element).toHaveClass() - makes sure an element has a class name;
expect(element).toHaveTextContent() - makes sure an element has some particular text;
expect(element).toHaveValue() - makes sure an input, select, or textarea has a value;

user.click(element) - simulates clicking on the provided element 
user.keyboard('text') - simulates typing 'text'
user.keyboard('{Enter}') - simulates pressing the enter key 